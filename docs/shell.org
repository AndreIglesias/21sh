#+TITLE: minishell
#+AUTHOR: ciglesia & jiglesia
#+EMAIL: ciglesia@student.42.fr & jiglesia@student.42.fr
#+OPTIONS: toc:nil

* TODOS
https://orgmode.org/manual/Checkboxes.html
** TODO [#A] FAQs [50%]
- [X] what Display Environment?
  * *Termcap* that takes as _param_ a player number to qualify it as /alive/
- [ ] where is the terminal history?
  *

** TODO [#B] DEV [0%]
- [ ] Environment [0%]
  - [ ] Input capture
  - [ ] Keyboard capture
  - [ ] Signal Reciever
- [ ] Analysis [0%]
  - [ ] Lexer
  - [ ] Tokens
  - [ ] Parser
  - [ ] Abstract Syntax Tree (AST)
  - [ ] Semantic Analyzer
  - [ ] Annotated AST
- [ ] Evaluator [0%]
  - [ ] Process AST to yield a result
  - [ ] Locate binaries
- [ ] Environment [0%]
  - [ ] To keep track of the values of variables
* REFERENCE
** ALLOWED FUNCTIONS

|------------+-------------------------------------+---------------------------------------------------|
| *lib*      | *function*                          | *description*                                     |
|------------+-------------------------------------+---------------------------------------------------|
| stdio      | printf                              | formated output conversion                        |
|------------+-------------------------------------+---------------------------------------------------|
| stdlib     | malloc                              | Allocate dynamic memory                           |
|            | free                                | Free dynamic memory                               |
|            | exit                                | Causes normal process termination                 |
|            |                                     |                                                   |
|            | getenv                              | Get an environment variable                       |
|------------+-------------------------------------+---------------------------------------------------|
| unistd     | write                               | Write to fd                                       |
|            | read                                | Read from fd                                      |
|            | close                               | Close a fd                                        |
|            | fork (sys/types)                    | Create a child process                            |
|            |                                     |                                                   |
|            | getcwd                              | Get current working directory                     |
|            | chdir                               | Change working directory                          |
|            | execve                              | Execute program                                   |
|            |                                     |                                                   |
|            | dup                                 | Duplicate a fd                                    |
|            | dup2                                | *Same as above*                                   |
|            | pipe                                | Create pipe                                       |
|            |                                     |                                                   |
|            | isatty                              | Test whether a fd refers to a terminal            |
|            | ttyname                             | Return name of a terminal                         |
|            | ttyslot                             | Find slot of current user's term in a file        |
|------------+-------------------------------------+---------------------------------------------------|
| *fcntl*    | open                                | Open and possibly create a file                   |
| sys/types  |                                     |                                                   |
| sys/stat   |                                     |                                                   |
|------------+-------------------------------------+---------------------------------------------------|
| *sys/wait* | wait                                | Wait for process to change state                  |
| sys/types  | waitpid                             | *Same as above*                                   |
|            | wait3 (sys/resource & *time*)       | *Same as above*, BSD style                        |
|            | wait4 (sys/resource & *time*)       | *Same as above*, BSD style                        |
|------------+-------------------------------------+---------------------------------------------------|
| signal     | signal                              | ANSI C signal handling                            |
|            | kill (sys/types)                    | Send signal to a process                          |
|------------+-------------------------------------+---------------------------------------------------|
| *sys/stat* | stat                                | Get file status                                   |
| unistd     | lstat                               | *Same as above*                                   |
| sys/types  | fstat                               | *Same as above*                                   |
|------------+-------------------------------------+---------------------------------------------------|
| dirent     | opendir (sys/types)                 | Open a directory                                  |
|            | readdir                             | Read a directory                                  |
|            | closedir (sys/types)                | Close a directory                                 |
|------------+-------------------------------------+---------------------------------------------------|
| string     | strerror                            | Return string describing error number             |
|------------+-------------------------------------+---------------------------------------------------|
| errno      | errno                               | Number of last error                              |
|------------+-------------------------------------+---------------------------------------------------|
| sys/ioctl  | ioctl                               | Control device                                    |
|------------+-------------------------------------+---------------------------------------------------|
| *terminos* | tcsetattr                           | Set params associated with the terminal from      |
|            |                                     | the terminos structure *terminos_p*               |
|            |                                     |                                                   |
| unistd     | tcgetattr                           | Get params associated with the object             |
|            |                                     | referred by fd and stores them in the terminos    |
|            |                                     | structure *terminos_p*                            |
|------------+-------------------------------------+---------------------------------------------------|
| curses     | tgetent (loads entry for name)      | Direct *curses* interface to the terminfo         |
| term       | tgetflag (get boolean entry for id) | capability database                               |
| ~termcap   | tgetnum (get num entry for id)      |                                                   |
|            | tgetstr (get string entry for id)   |                                                   |
|            |                                     |                                                   |
|            | tgoto                               | Instantiates the params into the given capability |
|            |                                     | The output is passed to tputs                     |
|            |                                     |                                                   |
|            | tputs                               | Padds info to the str and outputs it              |
|            |                                     |                                                   |
|------------+-------------------------------------+---------------------------------------------------|

** PATH
locations of executable bin
** CMD
*** ECHO

|---------------+------------------------------------------|
| *CMD*         | echo                                     |
|---------------+------------------------------------------|
| *DESCRIPTION* | Display a line of text                   |
|---------------+------------------------------------------|
| *OPTIONS*     | -n (do not output the trailing new line) |
|---------------+------------------------------------------|
| env var       |                                          |
| $?            |                                          |
| > < >>        |                                          |
| pipe          |                                          |
|---------------+------------------------------------------|

*** CD

|---------------+-------------------------------------------------------|
| *CMD*         | cd                                                    |
|---------------+-------------------------------------------------------|
| *DESCRIPTION* | Changing the working directory (abs or relative PATH) |
|---------------+-------------------------------------------------------|
| *OPTIONS*     | None                                                  |
|---------------+-------------------------------------------------------|
| env var       |                                                       |
| $?            |                                                       |
| > < >>        |                                                       |
| pipe          |                                                       |
|---------------+-------------------------------------------------------|

*** PWD

|---------------+---------------------------------|
| *CMD*         | pwd                             |
|---------------+---------------------------------|
| *DESCRIPTION* | Print name of current directory |
|---------------+---------------------------------|
| *OPTIONS*     | None                            |
|---------------+---------------------------------|
| env var       |                                 |
| $?            |                                 |
| > < >>        |                                 |
| pipe          |                                 |
|---------------+---------------------------------|

*** EXPORT

|---------------+----------------------------------------|
| *CMD*         | export                                 |
|---------------+----------------------------------------|
| *DESCRIPTION* | Set the export attribute for variables |
|---------------+----------------------------------------|
| *OPTIONS*     | None                                   |
|---------------+----------------------------------------|
| env var       |                                        |
| $?            |                                        |
| > < >>        |                                        |
| pipe          |                                        |
|---------------+----------------------------------------|

*** UNSET

|---------------+-----------------------------------------------------------|
| *CMD*         | unset                                                     |
|---------------+-----------------------------------------------------------|
| *DESCRIPTION* | UnSet the value and attribute for variables and functions |
|---------------+-----------------------------------------------------------|
| *OPTIONS*     | None                                                      |
|---------------+-----------------------------------------------------------|
| env var       |                                                           |
| $?            |                                                           |
| > < >>        |                                                           |
| pipe          |                                                           |
|---------------+-----------------------------------------------------------|

*** ENV

|---------------+-----------------------------------------|
| *CMD*         | env                                     |
|---------------+-----------------------------------------|
| *DESCRIPTION* | run a program in a modified environment |
|---------------+-----------------------------------------|
| *OPTIONS*     | None                                    |
|---------------+-----------------------------------------|
| env var       |                                         |
| $?            |                                         |
| > < >>        |                                         |
| pipe          |                                         |
|---------------+-----------------------------------------|

*** EXIT

|---------------+-------------------------|
| *CMD*         | exit                    |
|---------------+-------------------------|
| *DESCRIPTION* | Cause the shell to exit |
|---------------+-------------------------|
| *OPTIONS*     | None                    |
|---------------+-------------------------|
| env var       |                         |
| $?            |                         |
| > < >>        |                         |
| pipe          |                         |
|---------------+-------------------------|

** SIGNALS

|--------+-------------------------------+-----------------------------------------------+----------------+-----|
|        | *NAME*                        | *DESCRIPTION*                                 | caret notation | num |
|--------+-------------------------------+-----------------------------------------------+----------------+-----|
| CTRL-C | End-of-Text character (*ETX*) | Interrupt the process (SIGINT)                | ^C             |  02 |
| CTRL-D | End-of-Transmission (*EOT*)   |                                               | ^D             |  04 |
| CTRL-\ | File Separator (*FS*)         | Terminate the process and dump core (SIGQUIT) | ^\             |  28 |
|--------+-------------------------------+-----------------------------------------------+----------------+-----|

** ANALYSIS
*** Lexer/Scanner (Lexical Analizer)
verify '' "" ; > < >> |
*** Parser (Syntax Analyzer)
first process env variables and sup syntax, after computing atomic cmd process operations between them.
*** Semantic Analyzer
resolves semantic information, check the 3 analysis nodes for errors
* USE && EXAMPLES
