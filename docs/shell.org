#+TITLE: minishell
#+AUTHOR: ciglesia & jiglesia
#+EMAIL: ciglesia@student.42.fr & jiglesia@student.42.fr
#+OPTIONS: toc:nil

* TODOS
https://orgmode.org/manual/Checkboxes.html
** TODO [#A] FAQs [50%]
- [X] what Display Environment?
  * *Termcap* that takes as _param_ a player number to qualify it as /alive/
- [ ] where is the terminal history?
  *

** TODO [#B] DEV [0%]
- [ ] Libft new norme
- [ ] Environment [0%]
  - [ ] Input capture
  - [ ] Keyboard capture
  - [ ] Signal Reciever
- [ ] Analysis [0%]
  - [ ] Lexer
  - [ ] Tokens
  - [ ] Parser
  - [ ] Abstract Syntax Tree (AST)
  - [ ] Semantic Analyzer
  - [ ] Annotated AST
- [ ] Evaluator [0%]
  - [ ] Process AST to yield a result
  - [ ] Locate binaries
- [ ] Environment [0%]
  - [ ] To keep track of the values of variables
* REFERENCE
** ALLOWED FUNCTIONS

|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| *lib*      | *function*                          | *description*                                       |                                                 |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| stdio      | printf                              | formated output conversion                          |                                                 |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| stdlib     | malloc                              | Allocate dynamic memory                             |                                                 |                                                                                            |
|            | free                                | Free dynamic memory                                 |                                                 |                                                                                            |
|            | exit                                | Causes normal process termination                   |                                                 |                                                                                            |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | getenv                              | Get an environment variable                         | char *getenv(const char *name);                 | returns a pointer to the value in the  environment,                                        |
|            |                                     |                                                     |                                                 | or NULL if there is no match                                                               |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| unistd     | write                               | Write to fd                                         |                                                 |                                                                                            |
|            | read                                | Read from fd                                        |                                                 |                                                                                            |
|            | close                               | Close a fd                                          |                                                 |                                                                                            |
|            | fork (sys/types)                    | Create a child process                              | pid_t fork(void);                               | the PID of the child process is returned in the parent,                                    |
|            |                                     |                                                     |                                                 | 0 is returned in the child.  On failure, -1 is returned in the  parent.                    |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | getcwd                              | Get current working directory                       | char *getcwd(char *buf, size_t size);           | return  a null-terminated string containing an absolute                                    |
|            |                                     |                                                     |                                                 | pathname that is the current working directory of  the  calling  process = buf             |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | chdir                               | Change working directory                            | int chdir(const char *path);                    | On success, zero is returned.  On error, -1 is returned                                    |
|            | execve                              | Execute program                                     | int execve(const char *pathname,                | On  success does not return, on error -1 is returned                                       |
|            |                                     |                                                     | .  char *const argv[], char *const envp[]);     |                                                                                            |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | dup                                 | Duplicate a fd to a random newfd                    | int dup(int oldfd);                             | return the new file descriptor.  On error, -1 is returned                                  |
|            | dup2                                | *Same as above* uses the newfd given                | int dup2(int oldfd, int newfd);                 | *same as above*                                                                            |
|            | pipe                                | Create pipe  [0] = read(child), [1] = write(parent) | int pipe(int pipefd[2]);                        | On success, zero is returned.  On error, -1 is returned                                    |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | isatty                              | Test whether a fd refers to a terminal              | int isatty(int fd);                             | returns 1 if fd is an open file descriptor referring to a terminal otherwise 0 is returned |
|            | ttyname                             | Return name of a terminal                           | char *ttyname(int fd);                          | returns a pointer to a pathname  on  success. on error NULL.                               |
|            | ttyslot                             | Find slot of current user's term in a file          | int ttyslot(void);                              | returns the slot number.  On error it returns 0 on UNIX but -1 on System V-like systems.   |
|            |                                     |                                                     |                                                 |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| *fcntl*    | open                                | Open and possibly create a file                     |                                                 |                                                                                            |
| sys/types  |                                     |                                                     |                                                 |                                                                                            |
| sys/stat   |                                     |                                                     |                                                 |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| *sys/wait* | wait                                | Wait for process to change state                    | pid_t wait(int *wstatus);                       | on success, returns the process ID of the  terminated  child;  on error, -1 is returned.   |
| sys/types  | waitpid                             | *Same as above*                                     | pid_t waitpid(pid_t pid,                        | on  success,  returns the process ID of the child whose state has changed; if WNOHANG was  |
|            |                                     |                                                     | .            int *wstatus, int options);        | specified but have not yet changed state, then 0 is returned. On error, -1 is returned.    |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | wait3 (sys/resource & *time*)       | *Same as above*, BSD style waits of any child       | pid_t wait3(int *wstatus, int options,          | same as waitpid + rusage                                                                   |
|            |                                     |                                                     | .          struct rusage *rusage);              |                                                                                            |
|            | wait4 (sys/resource & *time*)       | *Same as above*, BSD style select a specific child  | pid_t wait4(pid_t pid, int *wstatus,            | *same as above*                                                                            |
|            |                                     |                                                     | .      int options, struct rusage *rusage);     |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| signal     | signal                              | ANSI C signal handling                              | sighandler_t signal(int signum,                 | returns  the previous value of the signal handler, or SIG_ERR on error.                    |
|            |                                     |                                                     | .                   sighandler_t handler)       |                                                                                            |
|            | kill (sys/types)                    | Send signal to a process                            | int kill(pid_t pid, int sig);                   | returns 0 on succes, -1 on error                                                           |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| *sys/stat* | stat                                | Get file status                                     | int stat(const char *pathname,                  | On success, zero is returned.  On error, -1 is returned                                    |
|            |                                     |                                                     | .        struct stat *statbuf);                 |                                                                                            |
| unistd     | lstat                               | *Same as above* if link info of link                | int lstat(const char *pathname,                 | On success, zero is returned.  On error, -1 is returned                                    |
|            |                                     |                                                     | .         struct stat *statbuf);                |                                                                                            |
| sys/types  | fstat                               | *Same as above* specify fd                          | int fstat(int fd, struct stat *statbuf);        | On success, zero is returned.  On error, -1 is returned                                    |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| dirent     | opendir (sys/types)                 | Open a directory                                    | DIR *opendir(const char *name);                 | return a pointer to the directory stream. On error, NULL.                                  |
|            | readdir                             | Read a directory                                    | struct dirent *readdir(DIR *dirp);              | returns a pointer to  a  dirent  structure.                                                |
|            | closedir (sys/types)                | Close a directory                                   | int closedir(DIR *dirp);                        | returns 0 on success.  On error, -1                                                        |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| string     | strerror                            | Return string describing error number               | char *strerror(int errnum);                     | return the appropriate error description string,  or  an  "Unknown error" message          |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| errno      | errno                               | Number of last error                                |                                                 |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| sys/ioctl  | ioctl                               | Control input and output of  devices                | int ioctl(int fd, unsigned long request, ...);  | on success zero is returned. On error, -1 is returned.                                     |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| *termios*  | tcsetattr                           | Set params associated with the terminal from        | int tcsetattr(int fd, int optional_actions,     | 0 on succes (even if only 1 succes when multiple), -1 on error                             |
|            |                                     | the terminos structure *terminos_p*                 | .           const struct termios *termios_p);   |                                                                                            |
|            |                                     |                                                     |                                                 |                                                                                            |
| unistd     | tcgetattr                           | Get params associated with the object               | int tcgetattr(int fd, struct                    | * same as above*                                                                           |
|            |                                     | referred by fd and stores them in the terminos      | .             termios *termios_p);              |                                                                                            |
|            |                                     | structure *terminos_p*                              |                                                 |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|
| curses     | tgetent (loads entry for name)      | Direct *curses* interface to the terminfo           | int tgetent(char *bp, const char *name);        | 1 on success, 0 if there is no such entry, and -1 if the terminfocould not be found.       |
| term       | tgetflag (get boolean entry for id) | capability database                                 | int tgetflag(char *id);                         | the boolean entry for id, or zero if it is not available.                                  |
| ~termcap   | tgetnum (get num entry for id)      |                                                     | int tgetnum(char *id);                          | the numeric entry for id, or -1 if it is not available.                                    |
|            | tgetstr (get string entry for id)   |                                                     | char *tgetstr(char *id, char **area);           | the string entry for id, or zero if it is not available.                                   |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | tgoto                               | Instantiates the params into the given capability   | char *tgoto(const char *cap, int col, int row); |                                                                                            |
|            |                                     | The output is passed to tputs                       |                                                 |                                                                                            |
|            |                                     |                                                     |                                                 |                                                                                            |
|            | tputs                               | Padds info to the str and outputs it                | int tputs(const char *str, int affcnt,          |                                                                                            |
|            |                                     |                                                     | .          int (*putc)(int));                   |                                                                                            |
|------------+-------------------------------------+-----------------------------------------------------+-------------------------------------------------+--------------------------------------------------------------------------------------------|

** PATH
locations of executable bin
** CMD
*** ECHO

|---------------+------------------------------------------|
| *CMD*         | echo                                     |
|---------------+------------------------------------------|
| *DESCRIPTION* | Display a line of text                   |
|---------------+------------------------------------------|
| *OPTIONS*     | -n (do not output the trailing new line) |
|---------------+------------------------------------------|
| env var       |                                          |
| $?            |                                          |
| > < >>        |                                          |
| pipe          |                                          |
|---------------+------------------------------------------|

*** CD

|---------------+-------------------------------------------------------|
| *CMD*         | cd                                                    |
|---------------+-------------------------------------------------------|
| *DESCRIPTION* | Changing the working directory (abs or relative PATH) |
|---------------+-------------------------------------------------------|
| *OPTIONS*     | None                                                  |
|---------------+-------------------------------------------------------|
| env var       |                                                       |
| $?            |                                                       |
| > < >>        |                                                       |
| pipe          |                                                       |
|---------------+-------------------------------------------------------|

*** PWD

|---------------+---------------------------------|
| *CMD*         | pwd                             |
|---------------+---------------------------------|
| *DESCRIPTION* | Print name of current directory |
|---------------+---------------------------------|
| *OPTIONS*     | None                            |
|---------------+---------------------------------|
| env var       |                                 |
| $?            |                                 |
| > < >>        |                                 |
| pipe          |                                 |
|---------------+---------------------------------|

*** EXPORT

|---------------+----------------------------------------|
| *CMD*         | export                                 |
|---------------+----------------------------------------|
| *DESCRIPTION* | Set the export attribute for variables |
|---------------+----------------------------------------|
| *OPTIONS*     | None                                   |
|---------------+----------------------------------------|
| env var       |                                        |
| $?            |                                        |
| > < >>        |                                        |
| pipe          |                                        |
|---------------+----------------------------------------|

*** UNSET

|---------------+-----------------------------------------------------------|
| *CMD*         | unset                                                     |
|---------------+-----------------------------------------------------------|
| *DESCRIPTION* | UnSet the value and attribute for variables and functions |
|---------------+-----------------------------------------------------------|
| *OPTIONS*     | None                                                      |
|---------------+-----------------------------------------------------------|
| env var       |                                                           |
| $?            |                                                           |
| > < >>        |                                                           |
| pipe          |                                                           |
|---------------+-----------------------------------------------------------|

*** ENV

|---------------+-----------------------------------------|
| *CMD*         | env                                     |
|---------------+-----------------------------------------|
| *DESCRIPTION* | run a program in a modified environment |
|---------------+-----------------------------------------|
| *OPTIONS*     | None                                    |
|---------------+-----------------------------------------|
| env var       |                                         |
| $?            |                                         |
| > < >>        |                                         |
| pipe          |                                         |
|---------------+-----------------------------------------|

*** EXIT

|---------------+-------------------------|
| *CMD*         | exit                    |
|---------------+-------------------------|
| *DESCRIPTION* | Cause the shell to exit |
|---------------+-------------------------|
| *OPTIONS*     | None                    |
|---------------+-------------------------|
| env var       |                         |
| $?            |                         |
| > < >>        |                         |
| pipe          |                         |
|---------------+-------------------------|

** SIGNALS

|--------+-------------------------------+-----------------------------------------------+----------------+-----|
|        | *NAME*                        | *DESCRIPTION*                                 | caret notation | num |
|--------+-------------------------------+-----------------------------------------------+----------------+-----|
| CTRL-C | End-of-Text character (*ETX*) | Interrupt the process (SIGINT)                | ^C             |  02 |
| CTRL-D | End-of-Transmission (*EOT*)   |                                               | ^D             |  04 |
| CTRL-\ | File Separator (*FS*)         | Terminate the process and dump core (SIGQUIT) | ^\             |  28 |
|--------+-------------------------------+-----------------------------------------------+----------------+-----|

** ANALYSIS
*** Lexer/Scanner (Lexical Analizer)
verify '' "" ; > < >> |
*** Parser (Syntax Analyzer)
first process env variables and sup syntax, after computing atomic cmd process operations between them.
*** Semantic Analyzer
resolves semantic information, check the 3 analysis nodes for errors
* USE && EXAMPLES
